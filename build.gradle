buildscript {
    ext {
        kotlin_version = '1.2.50'
        spring_version = '5.1.1.RELEASE'
        spring_boot_version = '2.2.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.2.2.RELEASE'
        spring_session_version = '1.3.3.RELEASE'
        corda_release_version = '4.9'
        corda_core_release_version = '4.9'
        corda_platform_version = '4'
        corda_version = '4.6'
        corda_gradle_plugins_version = '5.0.12'
        log4j_version = '2.11.2'
        lmax_version = '3.4.2'
        guava_version = '21.0'
        junit_version = '5.5.2'
        kluent_version = '1.38'
        postgres_version = '42.2.5'
        lombok_version = '1.18.24'
        jetty_version = '9.4.18.v20190429'
        quasar_version = '0.7.10'
        slf4j_version = '1.7.25'
        maven_url = "http://172.22.80.23:8083"
        maven_username = "deployment"
        maven_password = "deployment"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://software.r3.com/artifactory/corda-releases' }
        maven { url 'https://software.r3.com/artifactory/corda-dependencies' }
    }
    dependencies {
        //classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath "co.paralleluniverse:quasar-core:$quasar_version"
    }
}

allprojects { //Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'java'

    compileJava {
        options.compilerArgs << '-parameters'
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://software.r3.com/artifactory/corda' }
        maven { url 'https://jitpack.io' }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

group 'com.ehkd'
version '1.0-SNAPSHOT'
apply plugin: "java"
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'
apply plugin: 'maven'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    implementation "org.projectlombok:lombok:$lombok_version"

    //compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    // Corda dependencies.
    compile "net.corda:corda-core:$corda_core_release_version"
    compile "net.corda:corda-node-api:$corda_release_version"
    compile "net.corda:corda:$corda_release_version"
    compile "net.corda:corda-rpc:$corda_release_version"
    compile "net.corda:corda-jackson:$corda_release_version"

    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }

    compile("org.springframework.boot:spring-boot-starter-security:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    compile project(":ehkd-poc-corda")

    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"

    implementation("org.postgresql:postgresql:42.5.0")
    testCompileOnly "org.projectlombok:lombok:$lombok_version"
    testAnnotationProcessor "org.projectlombok:lombok:$lombok_version"

    testImplementation("org.springframework.boot:spring-boot-starter-test:$spring_boot_version")
    testCompile "junit:junit:4.13.1"

}
configurations {
    all*.exclude module: 'spring-boot-starter-logging'
    all*.exclude module: 'logback-classic'
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://software.r3.com/artifactory/corda' }
    maven { url 'https://jitpack.io' }
}

jar {
    enabled = true
    getCustomVersion()
}
//生成版本号
def getCustomVersion() {
    String[]vs=project.version.toString().split("-")
    //git上的提交次数
    Process process = "git rev-list --count HEAD".execute()
    process.waitFor()
    project.version = vs[0]+"."+process.getText().toInteger()+"-"+vs[1]
}

//打包源码
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}
//上传maven私服
publishing {
    publications {
        maven(MavenPublication) {
            println '************************************************************'
            println '* This project version data                                 '
            println "* groupId : $project.group                                  "
            println "* artifactId : $project.name                                "
            println "* version : $project.version                                "
            println '************************************************************'
            groupId project.group
            artifactId project.name
            version project.version
            //如果是war包填写components.web，如果是jar包填写components.java
            from components.java
            //配置上传源码
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
    repositories {
        maven {
            //指定要上传的maven私服仓库
            if (project.version.endsWith('-SNAPSHOT')) {
                url = "$maven_url/repository/maven-snapshots/"
            } else {
                url = "$maven_url/repository/maven-releases/"
            }
            credentials {
                username "$maven_username"
                password "$maven_password"
            }
        }
    }
}